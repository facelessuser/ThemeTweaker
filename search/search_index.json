{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ThemeTweaker Overview Change your Sublime tmTheme files by applying different color filters on the fly. ThemeTweaker came out as a side project while I was working on ExportHtml. I was dealing with the replicating the tmTheme in an HTML output, but later wanted to be able to modify the tmTheme with filters such as: rotating the hue, adjusting the contrast, increasing/deceasing the brightness, etc. Some of the filters are useless, but they were fun to throw together. I have been using it for a while, but recently decided to throw it together in its own package. It can be used as a stand alone plugin for tweaking your themes, or it can be leveraged by other plugins for modifying color scheme (tmTheme) files. Features ThemeTweaker has a number of commands that allow you to do the following: Increase/decrease brightness. Increase/decrease saturation. Increase/decrease contrast. Rotate the hues of the theme. Colorize the theme (make all of the colors different shades of one color). Convert the theme to grayscale. Apply a Sepia filter. Invert the color scheme. Cause foreground scopes to glow (keywords etc. except for the main foreground color; maybe that will change). With filters that make sense, allow limiting the filter to background or foreground scopes. Create shortcuts to adjust the color scheme only when in ThemeMode . Allow undo and redo of filters while in ThemeMode . A command to revert all filters in one shot and return to original theme. Does not modify the original theme directly, but creates a copy. Live update when applying filters.","title":"ThemeTweaker"},{"location":"#themetweaker","text":"","title":"ThemeTweaker"},{"location":"#overview","text":"Change your Sublime tmTheme files by applying different color filters on the fly. ThemeTweaker came out as a side project while I was working on ExportHtml. I was dealing with the replicating the tmTheme in an HTML output, but later wanted to be able to modify the tmTheme with filters such as: rotating the hue, adjusting the contrast, increasing/deceasing the brightness, etc. Some of the filters are useless, but they were fun to throw together. I have been using it for a while, but recently decided to throw it together in its own package. It can be used as a stand alone plugin for tweaking your themes, or it can be leveraged by other plugins for modifying color scheme (tmTheme) files.","title":"Overview"},{"location":"#features","text":"ThemeTweaker has a number of commands that allow you to do the following: Increase/decrease brightness. Increase/decrease saturation. Increase/decrease contrast. Rotate the hues of the theme. Colorize the theme (make all of the colors different shades of one color). Convert the theme to grayscale. Apply a Sepia filter. Invert the color scheme. Cause foreground scopes to glow (keywords etc. except for the main foreground color; maybe that will change). With filters that make sense, allow limiting the filter to background or foreground scopes. Create shortcuts to adjust the color scheme only when in ThemeMode . Allow undo and redo of filters while in ThemeMode . A command to revert all filters in one shot and return to original theme. Does not modify the original theme directly, but creates a copy. Live update when applying filters.","title":"Features"},{"location":"installation/","text":"Installation Package Control The recommended way to install ThemeTweaker is via Package Control . Package Control will install the correct branch on your system and keep it up to date. Ensure Package Control is installed. Instructions are found here . In Sublime Text, press Ctrl \uff0b Shift \uff0b P (Win, Linux) or Cmd \uff0b Shift \uff0b P (macOS) to bring up the quick panel. It will show a list of installable plugins. Start typing ThemeTweaker ; when you see it, select it. Restart to be sure everything is loaded proper. Enjoy! Manual Installation Warning This is not the recommended way to install ThemeTweaker for the average user. Installing this way will not get automatically updated. If you are forking for a pull request, you should just clone ThemeTweaker and run Package Control's Satisfy Dependency command to get all the dependencies. For those who want to install ExportHtml without package control, here are the steps. It understood that some people for what ever reason will prefer manually and may even have legitimate reasons to do so. When going this route, you will have to keep all the packages updated yourself. Download the latest releases of the following dependencies and unpack or git clone in the Packages folder as shown below: teddy_beer_maniac/sublime-text-dependency-markupsafe \u2192 markupsafe teddy_beer_maniac/sublime-text-dependency-jinja2 \u2192 python-jinja2 packagecontrol/pygments \u2192 pygments facelessuser/sublime-markdown-popups \u2192 mdpopups facelessuser/sublime-markdown \u2192 python-markdown Download and unpack or git clone the latest ExportHtml release and unpack as ExportHtml : facelessuser/ThemeTweaker \u2192 ThemeTweaker Create a folder under Packages called 00-dependencies and under that folder create a file called 00-dependencies.py : Copy the following code to 00-dependencies.py (this code was taken from Package Control): import sys import os from os.path import dirname if os . name == 'nt' : from ctypes import windll , create_unicode_buffer import sublime if sys . version_info >= ( 3 ,): def decode ( path ): return path def encode ( path ): return path if os . path . basename ( __file__ ) == 'sys_path.py' : pc_package_path = dirname ( dirname ( __file__ )) # When loaded as a .sublime-package file, the filename ends up being # Package Control.sublime-package/Package Control.package_control.sys_path else : pc_package_path = dirname ( __file__ ) st_version = u '3' else : def decode ( path ): if not isinstance ( path , unicode ): path = path . decode ( sys . getfilesystemencoding ()) return path def encode ( path ): if isinstance ( path , unicode ): path = path . encode ( sys . getfilesystemencoding ()) return path pc_package_path = decode ( os . getcwd ()) st_version = u '2' st_dir = dirname ( dirname ( pc_package_path )) def add ( path , first = False ): \"\"\" Adds an entry to the beginning of sys.path, working around the fact that Python 2.6 can't import from non-ASCII paths on Windows. :param path: A unicode string of a folder, zip file or sublime-package file to add to the path :param first: If the path should be added at the beginning \"\"\" if os . name == 'nt' : # Work around unicode path import issue on Windows with Python 2.6 buf = create_unicode_buffer ( 512 ) if windll . kernel32 . GetShortPathNameW ( path , buf , len ( buf )): path = buf . value enc_path = encode ( path ) if os . path . exists ( enc_path ): if first : try : sys . path . remove ( enc_path ) except ( ValueError ): pass sys . path . insert ( 0 , enc_path ) elif enc_path not in sys . path : sys . path . append ( enc_path ) def remove ( path ): \"\"\" Removes a path from sys.path if it is present :param path: A unicode string of a folder, zip file or sublime-package file \"\"\" try : sys . path . remove ( encode ( path )) except ( ValueError ): pass if os . name == 'nt' : buf = create_unicode_buffer ( 512 ) if windll . kernel32 . GetShortPathNameW ( path , buf , len ( buf )): path = buf . value try : sys . path . remove ( encode ( path )) except ( ValueError ): pass def generate_dependency_paths ( name ): \"\"\" Accepts a dependency name and generates a dict containing the three standard import paths that are valid for the current machine. :param name: A unicode string name of the dependency :return: A dict with the following keys: - 'ver' - 'plat' - 'arch' \"\"\" packages_dir = os . path . join ( st_dir , u 'Packages' ) dependency_dir = os . path . join ( packages_dir , name ) ver = u 'st %s ' % st_version plat = sublime . platform () arch = sublime . arch () return { 'all' : os . path . join ( dependency_dir , 'all' ), 'ver' : os . path . join ( dependency_dir , ver ), 'plat' : os . path . join ( dependency_dir , u ' %s _ %s ' % ( ver , plat )), 'arch' : os . path . join ( dependency_dir , u ' %s _ %s _ %s ' % ( ver , plat , arch )) } def add_dependency ( name , first = False ): \"\"\" Accepts a dependency name and automatically adds the appropriate path to sys.path, if the dependency has a path for the current platform and architecture. :param name: A unicode string name of the dependency :param first: If the path should be added to the beginning of the list \"\"\" dep_paths = generate_dependency_paths ( name ) for path in dep_paths . values (): if os . path . exists ( encode ( path )): add ( path , first = first ) add_dependency ( 'pygments' ) add_dependency ( 'markupsafe' ) add_dependency ( 'python-markdown' ) add_dependency ( 'python-jinja2' ) add_dependency ( 'mdpopups' ) Restart and enjoy. Git Cloning Quit Sublime Text. Open a terminal and enter the following. For dependencies replace the URL with the appropriate URL, and the appropriate folder to check it out to: cd /path/to/Sublime Text 3/Packages git clone https://github.com/facelessuser/ThemeTweaker.git ThemeTweaker Restart Sublime Text.","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#package-control","text":"The recommended way to install ThemeTweaker is via Package Control . Package Control will install the correct branch on your system and keep it up to date. Ensure Package Control is installed. Instructions are found here . In Sublime Text, press Ctrl \uff0b Shift \uff0b P (Win, Linux) or Cmd \uff0b Shift \uff0b P (macOS) to bring up the quick panel. It will show a list of installable plugins. Start typing ThemeTweaker ; when you see it, select it. Restart to be sure everything is loaded proper. Enjoy!","title":"Package Control"},{"location":"installation/#manual-installation","text":"Warning This is not the recommended way to install ThemeTweaker for the average user. Installing this way will not get automatically updated. If you are forking for a pull request, you should just clone ThemeTweaker and run Package Control's Satisfy Dependency command to get all the dependencies. For those who want to install ExportHtml without package control, here are the steps. It understood that some people for what ever reason will prefer manually and may even have legitimate reasons to do so. When going this route, you will have to keep all the packages updated yourself. Download the latest releases of the following dependencies and unpack or git clone in the Packages folder as shown below: teddy_beer_maniac/sublime-text-dependency-markupsafe \u2192 markupsafe teddy_beer_maniac/sublime-text-dependency-jinja2 \u2192 python-jinja2 packagecontrol/pygments \u2192 pygments facelessuser/sublime-markdown-popups \u2192 mdpopups facelessuser/sublime-markdown \u2192 python-markdown Download and unpack or git clone the latest ExportHtml release and unpack as ExportHtml : facelessuser/ThemeTweaker \u2192 ThemeTweaker Create a folder under Packages called 00-dependencies and under that folder create a file called 00-dependencies.py : Copy the following code to 00-dependencies.py (this code was taken from Package Control): import sys import os from os.path import dirname if os . name == 'nt' : from ctypes import windll , create_unicode_buffer import sublime if sys . version_info >= ( 3 ,): def decode ( path ): return path def encode ( path ): return path if os . path . basename ( __file__ ) == 'sys_path.py' : pc_package_path = dirname ( dirname ( __file__ )) # When loaded as a .sublime-package file, the filename ends up being # Package Control.sublime-package/Package Control.package_control.sys_path else : pc_package_path = dirname ( __file__ ) st_version = u '3' else : def decode ( path ): if not isinstance ( path , unicode ): path = path . decode ( sys . getfilesystemencoding ()) return path def encode ( path ): if isinstance ( path , unicode ): path = path . encode ( sys . getfilesystemencoding ()) return path pc_package_path = decode ( os . getcwd ()) st_version = u '2' st_dir = dirname ( dirname ( pc_package_path )) def add ( path , first = False ): \"\"\" Adds an entry to the beginning of sys.path, working around the fact that Python 2.6 can't import from non-ASCII paths on Windows. :param path: A unicode string of a folder, zip file or sublime-package file to add to the path :param first: If the path should be added at the beginning \"\"\" if os . name == 'nt' : # Work around unicode path import issue on Windows with Python 2.6 buf = create_unicode_buffer ( 512 ) if windll . kernel32 . GetShortPathNameW ( path , buf , len ( buf )): path = buf . value enc_path = encode ( path ) if os . path . exists ( enc_path ): if first : try : sys . path . remove ( enc_path ) except ( ValueError ): pass sys . path . insert ( 0 , enc_path ) elif enc_path not in sys . path : sys . path . append ( enc_path ) def remove ( path ): \"\"\" Removes a path from sys.path if it is present :param path: A unicode string of a folder, zip file or sublime-package file \"\"\" try : sys . path . remove ( encode ( path )) except ( ValueError ): pass if os . name == 'nt' : buf = create_unicode_buffer ( 512 ) if windll . kernel32 . GetShortPathNameW ( path , buf , len ( buf )): path = buf . value try : sys . path . remove ( encode ( path )) except ( ValueError ): pass def generate_dependency_paths ( name ): \"\"\" Accepts a dependency name and generates a dict containing the three standard import paths that are valid for the current machine. :param name: A unicode string name of the dependency :return: A dict with the following keys: - 'ver' - 'plat' - 'arch' \"\"\" packages_dir = os . path . join ( st_dir , u 'Packages' ) dependency_dir = os . path . join ( packages_dir , name ) ver = u 'st %s ' % st_version plat = sublime . platform () arch = sublime . arch () return { 'all' : os . path . join ( dependency_dir , 'all' ), 'ver' : os . path . join ( dependency_dir , ver ), 'plat' : os . path . join ( dependency_dir , u ' %s _ %s ' % ( ver , plat )), 'arch' : os . path . join ( dependency_dir , u ' %s _ %s _ %s ' % ( ver , plat , arch )) } def add_dependency ( name , first = False ): \"\"\" Accepts a dependency name and automatically adds the appropriate path to sys.path, if the dependency has a path for the current platform and architecture. :param name: A unicode string name of the dependency :param first: If the path should be added to the beginning of the list \"\"\" dep_paths = generate_dependency_paths ( name ) for path in dep_paths . values (): if os . path . exists ( encode ( path )): add ( path , first = first ) add_dependency ( 'pygments' ) add_dependency ( 'markupsafe' ) add_dependency ( 'python-markdown' ) add_dependency ( 'python-jinja2' ) add_dependency ( 'mdpopups' ) Restart and enjoy.","title":"Manual Installation"},{"location":"installation/#git-cloning","text":"Quit Sublime Text. Open a terminal and enter the following. For dependencies replace the URL with the appropriate URL, and the appropriate folder to check it out to: cd /path/to/Sublime Text 3/Packages git clone https://github.com/facelessuser/ThemeTweaker.git ThemeTweaker Restart Sublime Text.","title":"Git Cloning"},{"location":"usage/","text":"User Guide Overview In order to use ThemeTweaker, you must set up your desired commands. Commands can be for the command palette, keymaps, menu etc. ThemeTweaker comes with an example keymap file to show how commands are constructed. The default steps, hues, or intensities (depending on the command), are defined in the settings file. These can be changed if desired. When tweaking a scheme, the scheme file (plus overrides in Sublime Text builds 3150+) will be consolidated and copied into User/ThemeTweaker with the scheme name and the prefix tweak_ . In Sublime Text 3150+, scheme files will be of the type .sublime-color-scheme , while earlier builds will use the file type of .tmTheme . Filter Commands Brightness theme_tweaker_brightness Adjust the brightness of theme. Parameters Type Description direction string Accepts a string that is either + or - to control whether to go brighter or darker respectively. step float Controls the brightness magnitude for each step. It is in relation to the center 1.0 . So a value of 0.01 would shift it 1.01 . context string You can limit the filter to the background or foreground by setting the argument to either bg or fg respectively. theme string Theme to adjust. If none, it will use the current set theme. Contrast theme_tweaker_contrast Adjust the contrast of theme. Parameters Type Description direction string Accepts a string that is either + or - to control whether to go brighter or darker respectively. step float Controls the contrast magnitude for each step. It is in relation to the center 1.0 . So a value of 0.01 would shift it 1.01 . context string You can limit the filter to the background or foreground by setting the argument to either bg or fg respectively. theme string Theme to adjust. If none, it will use the current set theme. Saturation theme_tweaker_saturation Adjust the brightness of theme. Parameters Type Description direction string Accepts a string that is either + or - to control whether to go brighter or darker respectively. step float Controls the brightness magnitude for each step. It is in relation to the center 1.0 . So a value of 0.01 would shift it 1.01 . context string You can limit the filter to the background or foreground by setting the argument to either bg or fg respectively. theme string Theme to adjust. If none, it will use the current set theme. Hue theme_tweaker_hue Shift the hue of colors in the theme. Parameters Type Description direction string Accepts a string that is either + or - to control whether to go brighter or darker respectively. step integer Accepts an integer which represents a degree between 0 and 360 to shift the hue. context string You can limit the filter to the background or foreground by setting the argument to either bg or fg respectively. theme string Theme to adjust. If none, it will use the current set theme. Colorize theme_tweaker_colorize Applies the given hue to all colors in the theme. Parameters Type Description hue integer Accepts a hue value that will be applied to all colors. context string You can limit the filter to the background or foreground by setting the argument to either bg or fg respectively. theme string Theme to adjust. If none, it will use the current set theme. Invert theme_tweaker_invert Command will invert all colors of the theme. Parameters Type Description context string You can limit the filter to the background or foreground by setting the argument to either bg or fg respectively. theme string Theme to adjust. If none, it will use the current set theme. Sepia theme_tweaker_sepia Applies a sepia filer to the theme colors. Parameters Type Description context string You can limit the filter to the background or foreground by setting the argument to either bg or fg respectively. theme string Theme to adjust. If none, it will use the current set theme. Grayscale theme_tweaker_grayscale Applies a grayscale filter to the theme colors. Parameters | Type | Description ---------- | ------ | ----------- `context` | string | You can limit the filter to the background or foreground by setting the argument to either `bg` or `fg` respectively. `theme` | string | Theme to adjust. If none, it will use the current set theme. Glow theme_tweaker_glow Apply a glow filter to foreground colors. Parameters Type Description intensity float Accepts a floating point glow intensity to determine the strength of the glow. Glow should be between 0.0 and 1.0 . theme string Theme to adjust. If none, it will use the current set theme. Custom Filter theme_tweaker_custom A command that allows multiple filters to be chained together. It takes a string with special syntax to apply filters. All filters that are available under Filter Commands are configurable. All operations are defined by a single string. Available Filters: grayscale sepia invert brightness(float) saturation(float) contrast(float) hue(signed integer) colorize(integer) glow(positive float) To apply a filter to just the foreground or background, simply add @fg or @bg to the filter in question. Example { \"keys\" : [ \"up\" ], \"command\" : \"theme_tweaker_custom\" , \"context\" : [ { \"key\" : \"theme_tweaker\" } ], \"args\" : { \"filters\" : \"grayscale@fg;sepia;colorize(0);hue(-30);brightness(1.050000)@bg;saturation(0.900000);brightness(0.950000)\" } }, Special Commands Undo theme_tweaker_undo Undo last applied filter. Redo theme_tweaker_redo Re-apply last reverted filter. Clear theme_tweaker_clear Clears all applied filters. Toggle Theme Tweaker Mode This command is available in the command palette as Theme Tweaker: Toggle Tweak Mode . toggle_theme_tweaker_mode Toggles the internal theme_tweaker mode flag that can be used as a context for when tweak commands are active. See Constructing Commands for more info. Constructing Commands Whether a keymap, command palette, or menu command is desired, the two theme tweaker related required arguments are command which is the name of the commands and args which is a dictionary of the parameters. { \"keys\" : [ \"up\" ], \"command\" : \"theme_tweaker_brightness\" , \"args\" : { \"direction\" : \"+\" } }, Theme tweaker can check for the theme_tweaker context to control whether a command is active or not. The theme_tweaker context is toggled with the Toggle Theme Tweaker Mode command. { \"keys\" : [ \"up\" ], \"command\" : \"theme_tweaker_brightness\" , \"context\" : [ { \"key\" : \"theme_tweaker\" } ], \"args\" : { \"direction\" : \"+\" } }, Settings The following settings are used to control default values for the provided commands. Brightness Step Controls the default brightness step. Must be a positive value between 0.0 and 1.0. // Default brightness steps (+/- from 1.0) (range: 0.0 - 1.0) // Can be overridden in the // ThemeTweakerBrightnessCommand command's argument \"step\" \"brightness_step\" : 0.01 , Contrast Step Controls the default contrast step. Must be a positive value between 0.0 and 1.0. // Default contrast steps (+/- from 1.0) (range: 0.0 - 1.0) // Can be overridden in the // ThemeTweakerContrastCommand command's argument \"step\" \"contrast_step\" : 0.01 , Saturation Step Controls the default saturation step. Must be a positive value between 0.0 and 1.0. // Staturation steps (+/- from 1.0) (range: 0.0 - 1.0) // Can be overridden in the // ThemeTweakerSaturationCommand command's argument \"step\" \"saturation_step\" : 0.01 Hue Step Default hue step. Must be an integer from 0 to 360. // Hue step in degrees (range 0-360) // Can be overridden in the // ThemeTweakerHueCommand command's argument \"step\" \"hue_step\" : 10 , Colorize Hue The default hue for colorization. // Default colorize default hue (0=Redish) // Can be overridden in the // ThemeTweakerColorizeCommand command's argument \"hue\" \"colorize_hue\" : 0 , Glow Intensity The default for glow intensity. Must be a value from 0.0 to 1.0. // Default glow intensity (range: 0.0 - 1.0) // Can be overridden in the // ThemeTweakerGlowCommand command's argument \"intensity\" \"glow_intensity\" : 0.1 ,","title":"User Guide"},{"location":"usage/#user-guide","text":"","title":"User Guide"},{"location":"usage/#overview","text":"In order to use ThemeTweaker, you must set up your desired commands. Commands can be for the command palette, keymaps, menu etc. ThemeTweaker comes with an example keymap file to show how commands are constructed. The default steps, hues, or intensities (depending on the command), are defined in the settings file. These can be changed if desired. When tweaking a scheme, the scheme file (plus overrides in Sublime Text builds 3150+) will be consolidated and copied into User/ThemeTweaker with the scheme name and the prefix tweak_ . In Sublime Text 3150+, scheme files will be of the type .sublime-color-scheme , while earlier builds will use the file type of .tmTheme .","title":"Overview"},{"location":"usage/#filter-commands","text":"","title":"Filter Commands"},{"location":"usage/#brightness","text":"theme_tweaker_brightness Adjust the brightness of theme. Parameters Type Description direction string Accepts a string that is either + or - to control whether to go brighter or darker respectively. step float Controls the brightness magnitude for each step. It is in relation to the center 1.0 . So a value of 0.01 would shift it 1.01 . context string You can limit the filter to the background or foreground by setting the argument to either bg or fg respectively. theme string Theme to adjust. If none, it will use the current set theme.","title":"Brightness"},{"location":"usage/#contrast","text":"theme_tweaker_contrast Adjust the contrast of theme. Parameters Type Description direction string Accepts a string that is either + or - to control whether to go brighter or darker respectively. step float Controls the contrast magnitude for each step. It is in relation to the center 1.0 . So a value of 0.01 would shift it 1.01 . context string You can limit the filter to the background or foreground by setting the argument to either bg or fg respectively. theme string Theme to adjust. If none, it will use the current set theme.","title":"Contrast"},{"location":"usage/#saturation","text":"theme_tweaker_saturation Adjust the brightness of theme. Parameters Type Description direction string Accepts a string that is either + or - to control whether to go brighter or darker respectively. step float Controls the brightness magnitude for each step. It is in relation to the center 1.0 . So a value of 0.01 would shift it 1.01 . context string You can limit the filter to the background or foreground by setting the argument to either bg or fg respectively. theme string Theme to adjust. If none, it will use the current set theme.","title":"Saturation"},{"location":"usage/#hue","text":"theme_tweaker_hue Shift the hue of colors in the theme. Parameters Type Description direction string Accepts a string that is either + or - to control whether to go brighter or darker respectively. step integer Accepts an integer which represents a degree between 0 and 360 to shift the hue. context string You can limit the filter to the background or foreground by setting the argument to either bg or fg respectively. theme string Theme to adjust. If none, it will use the current set theme.","title":"Hue"},{"location":"usage/#colorize","text":"theme_tweaker_colorize Applies the given hue to all colors in the theme. Parameters Type Description hue integer Accepts a hue value that will be applied to all colors. context string You can limit the filter to the background or foreground by setting the argument to either bg or fg respectively. theme string Theme to adjust. If none, it will use the current set theme.","title":"Colorize"},{"location":"usage/#invert","text":"theme_tweaker_invert Command will invert all colors of the theme. Parameters Type Description context string You can limit the filter to the background or foreground by setting the argument to either bg or fg respectively. theme string Theme to adjust. If none, it will use the current set theme.","title":"Invert"},{"location":"usage/#sepia","text":"theme_tweaker_sepia Applies a sepia filer to the theme colors. Parameters Type Description context string You can limit the filter to the background or foreground by setting the argument to either bg or fg respectively. theme string Theme to adjust. If none, it will use the current set theme.","title":"Sepia"},{"location":"usage/#grayscale","text":"theme_tweaker_grayscale Applies a grayscale filter to the theme colors. Parameters | Type | Description ---------- | ------ | ----------- `context` | string | You can limit the filter to the background or foreground by setting the argument to either `bg` or `fg` respectively. `theme` | string | Theme to adjust. If none, it will use the current set theme.","title":"Grayscale"},{"location":"usage/#glow","text":"theme_tweaker_glow Apply a glow filter to foreground colors. Parameters Type Description intensity float Accepts a floating point glow intensity to determine the strength of the glow. Glow should be between 0.0 and 1.0 . theme string Theme to adjust. If none, it will use the current set theme.","title":"Glow"},{"location":"usage/#custom-filter","text":"theme_tweaker_custom A command that allows multiple filters to be chained together. It takes a string with special syntax to apply filters. All filters that are available under Filter Commands are configurable. All operations are defined by a single string. Available Filters: grayscale sepia invert brightness(float) saturation(float) contrast(float) hue(signed integer) colorize(integer) glow(positive float) To apply a filter to just the foreground or background, simply add @fg or @bg to the filter in question. Example { \"keys\" : [ \"up\" ], \"command\" : \"theme_tweaker_custom\" , \"context\" : [ { \"key\" : \"theme_tweaker\" } ], \"args\" : { \"filters\" : \"grayscale@fg;sepia;colorize(0);hue(-30);brightness(1.050000)@bg;saturation(0.900000);brightness(0.950000)\" } },","title":"Custom Filter"},{"location":"usage/#special-commands","text":"","title":"Special Commands"},{"location":"usage/#undo","text":"theme_tweaker_undo Undo last applied filter.","title":"Undo"},{"location":"usage/#redo","text":"theme_tweaker_redo Re-apply last reverted filter.","title":"Redo"},{"location":"usage/#clear","text":"theme_tweaker_clear Clears all applied filters.","title":"Clear"},{"location":"usage/#toggle-theme-tweaker-mode","text":"This command is available in the command palette as Theme Tweaker: Toggle Tweak Mode . toggle_theme_tweaker_mode Toggles the internal theme_tweaker mode flag that can be used as a context for when tweak commands are active. See Constructing Commands for more info.","title":"Toggle Theme Tweaker Mode"},{"location":"usage/#constructing-commands","text":"Whether a keymap, command palette, or menu command is desired, the two theme tweaker related required arguments are command which is the name of the commands and args which is a dictionary of the parameters. { \"keys\" : [ \"up\" ], \"command\" : \"theme_tweaker_brightness\" , \"args\" : { \"direction\" : \"+\" } }, Theme tweaker can check for the theme_tweaker context to control whether a command is active or not. The theme_tweaker context is toggled with the Toggle Theme Tweaker Mode command. { \"keys\" : [ \"up\" ], \"command\" : \"theme_tweaker_brightness\" , \"context\" : [ { \"key\" : \"theme_tweaker\" } ], \"args\" : { \"direction\" : \"+\" } },","title":"Constructing Commands"},{"location":"usage/#settings","text":"The following settings are used to control default values for the provided commands.","title":"Settings"},{"location":"usage/#brightness-step","text":"Controls the default brightness step. Must be a positive value between 0.0 and 1.0. // Default brightness steps (+/- from 1.0) (range: 0.0 - 1.0) // Can be overridden in the // ThemeTweakerBrightnessCommand command's argument \"step\" \"brightness_step\" : 0.01 ,","title":"Brightness Step"},{"location":"usage/#contrast-step","text":"Controls the default contrast step. Must be a positive value between 0.0 and 1.0. // Default contrast steps (+/- from 1.0) (range: 0.0 - 1.0) // Can be overridden in the // ThemeTweakerContrastCommand command's argument \"step\" \"contrast_step\" : 0.01 ,","title":"Contrast Step"},{"location":"usage/#saturation-step","text":"Controls the default saturation step. Must be a positive value between 0.0 and 1.0. // Staturation steps (+/- from 1.0) (range: 0.0 - 1.0) // Can be overridden in the // ThemeTweakerSaturationCommand command's argument \"step\" \"saturation_step\" : 0.01","title":"Saturation Step"},{"location":"usage/#hue-step","text":"Default hue step. Must be an integer from 0 to 360. // Hue step in degrees (range 0-360) // Can be overridden in the // ThemeTweakerHueCommand command's argument \"step\" \"hue_step\" : 10 ,","title":"Hue Step"},{"location":"usage/#colorize-hue","text":"The default hue for colorization. // Default colorize default hue (0=Redish) // Can be overridden in the // ThemeTweakerColorizeCommand command's argument \"hue\" \"colorize_hue\" : 0 ,","title":"Colorize Hue"},{"location":"usage/#glow-intensity","text":"The default for glow intensity. Must be a value from 0.0 to 1.0. // Default glow intensity (range: 0.0 - 1.0) // Can be overridden in the // ThemeTweakerGlowCommand command's argument \"intensity\" \"glow_intensity\" : 0.1 ,","title":"Glow Intensity"},{"location":"_snippets/abbr/","text":"","title":"Abbr"},{"location":"_snippets/links/","text":"","title":"Links"},{"location":"_snippets/refs/","text":"","title":"Refs"},{"location":"about/contributing/","text":"Contributing & Support Overview Sublime Versions Description ST3 Fully supported and actively maintained. Contribution from the community is encouraged and can be done in a variety of ways: Become a sponsor. Bug reports. Reviewing code. Code patches via pull requests. Documentation improvements via pull requests. Become a Sponsor Open source projects take time and money. Help support the project by becoming a sponsor. You can add your support at any tier you feel comfortable with. No amount is too little. We also accept one time contributions via PayPal. GitHub Sponsors PayPal Bug Reports Please read the documentation and search the issue tracker to try to find the answer to your question before posting an issue. When an issue is created, a template will be shown, please fill out the appropriate sections. If the template is not followed, the issue will be marked Invalid and closed. When creating an issue on the repository, please provide as much info as possible: Provide environment information by running Preferences->Package Settings->ExportHtml->Support Info . The information will be copied to the clipboard; paste the info in issue. Errors in console. Detailed description of the problem. Examples for reproducing the error. You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste. Provide links to 3 rd party color scheme package you are using if applicable. The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue. Be prepared to answer questions and provide additional information if required. Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed. Reviewing Code Take part in reviewing pull requests and/or reviewing direct commits. Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm. Pull Requests Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of. Continuous integration tests on are run on all pull requests and commits via Travis CI. When making a pull request, the tests will automatically be run, and the request must pass to be accepted. You can (and should) run these tests before pull requesting. If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge. Running Validation Tests Tip If you are running Sublime on a macOS or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below): chmod +x run_tests.sh ./run_tests.sh There are a couple of dependencies that must be present before running the tests. As ST3 is the only current, actively supported version, Python 3 must be used to validate the tests. Unit tests are run with pytest ( pytest-dev/pytest ). You can install pytest via: pip install pytest The tests should be run from the root folder of the plugin by using the following command: py.test . Linting is performed on the entire project with the following modules: pycqa/flake8 pycqa/flake8-docstrings ebeweber/flake8-mutable gforcada/flake8-builtins pycqa/pep8-naming These can be installed via: pip install flake8 pip install flake8-docstrings pip install flake8-mutable pip install flake8-builtins pip install pep8-naming Linting is performed with the following command: flake8 . Documentation Improvements A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation. If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation. Help with documentation is always appreciated and can be done via pull requests. There shouldn't be any need to run validation tests if only updating documentation. You don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of mkdocs/mkdocs , the squidfunk/mkdocs-material , and facelessuser/pymdown-extensions to render the docs. You can preview the docs if you install these two packages. The command for previewing the docs is mkdocs serve from the root directory. You can then view the documents at localhost:8000 .","title":"Contributing &amp; Support"},{"location":"about/contributing/#contributing--support","text":"","title":"Contributing &amp; Support"},{"location":"about/contributing/#overview","text":"Sublime Versions Description ST3 Fully supported and actively maintained. Contribution from the community is encouraged and can be done in a variety of ways: Become a sponsor. Bug reports. Reviewing code. Code patches via pull requests. Documentation improvements via pull requests.","title":"Overview"},{"location":"about/contributing/#become-a-sponsor","text":"Open source projects take time and money. Help support the project by becoming a sponsor. You can add your support at any tier you feel comfortable with. No amount is too little. We also accept one time contributions via PayPal. GitHub Sponsors PayPal","title":"Become a Sponsor "},{"location":"about/contributing/#bug-reports","text":"Please read the documentation and search the issue tracker to try to find the answer to your question before posting an issue. When an issue is created, a template will be shown, please fill out the appropriate sections. If the template is not followed, the issue will be marked Invalid and closed. When creating an issue on the repository, please provide as much info as possible: Provide environment information by running Preferences->Package Settings->ExportHtml->Support Info . The information will be copied to the clipboard; paste the info in issue. Errors in console. Detailed description of the problem. Examples for reproducing the error. You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste. Provide links to 3 rd party color scheme package you are using if applicable. The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue. Be prepared to answer questions and provide additional information if required. Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.","title":"Bug Reports"},{"location":"about/contributing/#reviewing-code","text":"Take part in reviewing pull requests and/or reviewing direct commits. Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.","title":"Reviewing Code"},{"location":"about/contributing/#pull-requests","text":"Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of. Continuous integration tests on are run on all pull requests and commits via Travis CI. When making a pull request, the tests will automatically be run, and the request must pass to be accepted. You can (and should) run these tests before pull requesting. If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.","title":"Pull Requests"},{"location":"about/contributing/#running-validation-tests","text":"Tip If you are running Sublime on a macOS or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below): chmod +x run_tests.sh ./run_tests.sh There are a couple of dependencies that must be present before running the tests. As ST3 is the only current, actively supported version, Python 3 must be used to validate the tests. Unit tests are run with pytest ( pytest-dev/pytest ). You can install pytest via: pip install pytest The tests should be run from the root folder of the plugin by using the following command: py.test . Linting is performed on the entire project with the following modules: pycqa/flake8 pycqa/flake8-docstrings ebeweber/flake8-mutable gforcada/flake8-builtins pycqa/pep8-naming These can be installed via: pip install flake8 pip install flake8-docstrings pip install flake8-mutable pip install flake8-builtins pip install pep8-naming Linting is performed with the following command: flake8 .","title":"Running Validation Tests"},{"location":"about/contributing/#documentation-improvements","text":"A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation. If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation. Help with documentation is always appreciated and can be done via pull requests. There shouldn't be any need to run validation tests if only updating documentation. You don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of mkdocs/mkdocs , the squidfunk/mkdocs-material , and facelessuser/pymdown-extensions to render the docs. You can preview the docs if you install these two packages. The command for previewing the docs is mkdocs serve from the root directory. You can then view the documents at localhost:8000 .","title":"Documentation Improvements"},{"location":"about/license/","text":"License The MIT License (MIT) Copyright \u00a9 2013 - 2021 Isaac Muse Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/license/#license","text":"The MIT License (MIT) Copyright \u00a9 2013 - 2021 Isaac Muse Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"}]}